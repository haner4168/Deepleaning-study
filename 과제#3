import re

#데이터 불러오기, 건강자료 18번 선택
v = open('18.txt').read()
print(v)

#특수문자 등 제거
def cleanText(readData):

    text = re.sub("[①②③④×：■∼▹「」□1234567890-=+,#/\?:^$@*\_.※~&%·ㆍ!』\\|\(\)\[\]\<\>\…》abcdefghijklmnopqrstuvwxyzABCDEFGHIZJLMNOPQRSTUVWXYZ\x01◦-]", '', readData)
    text = re.sub('\n+', ' ', text)
    text = re.sub(' +', ' ', text)
    return text

data = cleanText(v)
print(data)
f = open("new_text.txt", "w") # 파일 저장
f.write(data)
f.close()

### 데이터 불러오기 및 단어 단위로 분리
questions = []
answers = []

seed = 1000
text = open('new_text.txt').read() 
data=text.split()

for idx in range(len(data)-1):  # 단어 단위 길이로 표기
    questions.append(data[idx])
    answers.append(data[idx+1])


### 모든 단어를 index화 시킴(word 2 vec)
def _update_vocab(txt):
    chars = list(txt)

    for i, char in enumerate(chars):
        if char not in char_to_id:
            tmp_id = len(char_to_id)
            char_to_id[char] = tmp_id
            id_to_char[tmp_id] = char


id_to_char = {}
char_to_id = {}
for i in range(len(questions)):
    q, a = questions[i], answers[i]
    _update_vocab(q)
    _update_vocab(a)


### 뒤섞기
seed = 1000
indices = numpy.arange(len(x))
numpy.random.shuffle(indices)
x = x[indices]
t = t[indices]


### 검증 데이터셋으로 10% 할당
split_at = len(x) - len(x) // 10
(x_train, x_test) = x[:split_at], x[split_at:]
(t_train, t_test) = t[:split_at], t[split_at:]




###모형설정
# 하이퍼파라미터 설정
vocab_size = len(char_to_id)
wordvec_size = 16
hideen_size = 128
batch_size = 128
max_epoch = 25
max_grad = 5.0

#학습
model = Seq2seq(vocab_size, wordvec_size, hideen_size)
optimizer = Adam()
trainer = Trainer(model, optimizer)


###모형 구축 및 검증

acc_list = []
for epoch in range(max_epoch):
    trainer.fit(x_train, t_train, max_epoch=1,
                batch_size=batch_size, max_grad=max_grad)

    correct_num = 0
    for i in range(len(x_test)):
        question, correct = x_test[[i]], t_test[[i]]
        verbose = i < 10
        correct_num += eval_seq2seq(model, question, correct,
                                    id_to_char, verbose, is_reverse=False)

    acc = float(correct_num) / len(x_test)
    acc_list.append(acc)
    print('검증 정확도 %.3f%%' % (acc * 100))
